name: "Github Actions Activity"

# Defines when the workflow will run
on:
  # Manual trigger using GitHub Actions UI
  workflow_dispatch:
    inputs:
      # Input parameter to choose between apply or destroy actions
      action:
        description: 'Terraform Action to Perform'
        type: choice
        options:
        - Terraform_apply
        - Terraform_destroy

jobs:
  # Job for applying Terraform configurations
  terraform_apply:
    name: "Terraform_apply"
    # Condition to run this job only when 'Terraform_apply' is selected
    if: ${{ github.event.inputs.action == 'Terraform_apply' }}
    # Specifies the type of runner to use
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up AWS credentials for authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Using GitHub secrets for secure credential storage
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Secret variable
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Secret variable
          aws-region: ${{ vars.AWS_REGION }}  # Reference the repository variable

      # Step 3: Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: 1.1.9 # Specifies Terraform version to use
          terraform_wrapper: false

      # Step 4: Initialize Terraform working directory with S3 backend
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ vars.S3_BUCKET }}" -backend-config="key=${{ vars.S3_KEY }}" -backend-config="region=${{ vars.AWS_REGION }}"

      # Step 5: Check if the security group exists and import it if it does
      - name: Check and import existing security group
        id: check_import_sg
        run: |
          sg_id=$(aws ec2 describe-security-groups --filters Name=group-name,Values=allow_http --query "SecurityGroups[0].GroupId" --output text)
          if [ "$sg_id" != "None" ]; then
            terraform import aws_security_group.allow_http $sg_id
          fi

      # Step 6: Preview the infrastructure changes
      - name: Terraform Plan
        run: terraform plan

      # Step 7: Apply the infrastructure changes
      - name: Terraform Apply
        run: terraform apply -auto-approve # Auto-approve flag skips manual confirmation

  # Job for destroying Terraform configurations
  terraform_destroy:
    name: "Terraform_destroy"
    # Condition to run this job only when 'Terraform_destroy' is selected
    if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
    # Specifies the type of runner to use
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up AWS credentials for authentication
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          # Using GitHub secrets for secure credential storage
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Secret variable
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Secret variable
          aws-region: ${{ vars.AWS_REGION }}  # Reference the repository variable

      # Step 3: Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: 1.1.9 # Specifies Terraform version to use
          terraform_wrapper: false

      # Step 4: Initialize Terraform working directory with S3 backend
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ vars.S3_BUCKET }}" -backend-config="key=${{ vars.S3_KEY }}" -backend-config="region=${{ vars.AWS_REGION }}"

      # Step 5: Destroy the infrastructure
      - name: Terraform Destroy
        run: terraform destroy -auto-approve # Auto-approve flag skips manual confirmation
